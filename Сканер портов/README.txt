#Постановка задачи:

	3. Сканер TCPи UDPпортов. Стоимость = 5 баллов. Определить, какие TCPпорты открыты в заданном диапазоне.
	Стоимость = 10 баллов. То же, что на 5 баллов + параллельная реализация + проверять UDPпорты.
	Если послать UDP-пакет на закрытый порт, система ответит сообщением ICMP «порт 	недоступен». 
	Отсутствие такого сообщения можно истолковатькак сигнал того, что порт от-крыт. 
	С UDPпортами может возникнуть проблема–если порт блокируется брандмауэром, метод неверно покажет, что порт открыт.
	Если заблокированы ICMP-сообщения о недоступности порта, все порты будут казаться открытыми.
	Также, может быть установлено ограничение на частоту использования ICMP-пакетов, что также влияет на результаты, даваемые методом.
	Такие проблемы (в реальной среде) не являются препятствием для сдачи задачи,
	но в специально подготовленной среде (например, сервер поднят на localhost) сканер UDPпортов должен правильно работать.
	Стоимость = 15 баллов. Тоже, что на 10 баллов + определять протокол, который работает на открытом порте.
	Имеется в виду не «приписывать» номеру хорошо известных портов имена соответствующих протоколов, а реально определять протокол,
	посылая запрос 	(возможно не-корректный) и анализируя ответ.Если httpсервер будет запущен на 110 TCPпорту, это надо уметь понимать.
	Достаточно распознавать http, smtp, pop3, dns, sntp


Запуск: main.py.
 
Пример запуска: py main.py 
	Нужно ввести IP адрес, диапазон портов, протокол.
	Результат будет напечатан в консоль.
